// –î–∞–Ω–Ω—ã–µ —á–∏—Ç–æ–≤
const cheatsData = [
    {
        id: 1,
        name: "Delta Client",
        image: "assets/DeltaClient.png",
        version: "1.16.5",
        icon: "üî•"
    },
    {
        id: 2,
        name: "Wexside Client",
        image: "assets/WexsideClient.png",
        version: "1.16.5",
        icon: "‚ö°"
    },
    {
        id: 3,
        name: "Venus Free",
        image: "assets/VenusFree.png",
        version: "1.16.5",
        icon: "üåü"
    }
];

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const catalogGrid = document.getElementById('catalogGrid');
const modalOverlay = document.getElementById('modalOverlay');
const modalClose = document.getElementById('modalClose');
const modalImage = document.getElementById('modalImage');
const modalTitle = document.getElementById('modalTitle');
const modalVersion = document.getElementById('modalVersion');
const downloadBtn = document.getElementById('downloadBtn');
const notification = document.getElementById('notification');

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —á–∏—Ç–∞
function createCheatCard(cheat) {
    const card = document.createElement('div');
    card.className = 'cheat-card';
    card.setAttribute('data-cheat-id', cheat.id);
    
    // –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –∏–∫–æ–Ω–∫—É
    const imageElement = document.createElement('img');
    imageElement.className = 'card-image';
    imageElement.src = cheat.image;
    imageElement.alt = cheat.name;
    imageElement.loading = 'lazy';
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    imageElement.onerror = function() {
        const iconDiv = document.createElement('div');
        iconDiv.className = 'card-image';
        iconDiv.textContent = cheat.icon;
        this.parentNode.replaceChild(iconDiv, this);
    };
    
    card.innerHTML = `
        <div class="card-content">
            <h3 class="card-title">${cheat.name}</h3>
            <div class="card-version">
                <svg class="version-icon" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M12 2L2 7l10 5 10-5-10-5z"></path>
                    <path d="M2 17l10 5 10-5"></path>
                    <path d="M2 12l10 5 10-5"></path>
                </svg>
                <span>–í–µ—Ä—Å–∏—è: ${cheat.version}</span>
            </div>
        </div>
    `;
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–æ –∫–∞—Ä—Ç–æ—á–∫–∏
    card.insertBefore(imageElement, card.firstChild);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    card.addEventListener('click', () => openModal(cheat));
    
    return card;
}

// –†–µ–Ω–¥–µ—Ä –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
function renderCheats() {
    catalogGrid.innerHTML = '';
    cheatsData.forEach((cheat, index) => {
        const card = createCheatCard(cheat);
        catalogGrid.appendChild(card);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
        setTimeout(() => {
            card.classList.add('animate');
        }, index * 100);
    });
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function openModal(cheat) {
    // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const img = new Image();
    img.onload = function() {
        modalImage.innerHTML = `<img src="${cheat.image}" alt="${cheat.name}" style="width: 100%; height: 100%; object-fit: cover;">`;
    };
    img.onerror = function() {
        modalImage.textContent = cheat.icon;
    };
    img.src = cheat.image;
    
    modalTitle.textContent = cheat.name;
    modalVersion.querySelector('span').textContent = `–í–µ—Ä—Å–∏—è: ${cheat.version}`;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–∏—Ç–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    downloadBtn.setAttribute('data-cheat-name', cheat.name);
    
    modalOverlay.classList.add('active');
    document.body.style.overflow = 'hidden';
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function closeModal() {
    modalOverlay.classList.remove('active');
    document.body.style.overflow = 'auto';
}

// –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showNotification() {
    notification.classList.add('show');
    
    setTimeout(() => {
        notification.classList.remove('show');
    }, 3000);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
function handleDownload() {
    const cheatName = downloadBtn.getAttribute('data-cheat-name');
    console.log(`–°–∫–∞—á–∏–≤–∞–Ω–∏–µ: ${cheatName}`);
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    closeModal();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    showNotification();
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
document.addEventListener('DOMContentLoaded', () => {
    renderCheats();
});

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
modalClose.addEventListener('click', closeModal);
modalOverlay.addEventListener('click', (e) => {
    if (e.target === modalOverlay) {
        closeModal();
    }
});

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ ESC
document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && modalOverlay.classList.contains('active')) {
        closeModal();
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
downloadBtn.addEventListener('click', handleDownload);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —á–∏—Ç–∞ (–¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è)
function addCheat(cheatData) {
    const newId = Math.max(...cheatsData.map(c => c.id)) + 1;
    const newCheat = {
        id: newId,
        name: cheatData.name,
        image: cheatData.image,
        version: cheatData.version || "1.16.5",
        icon: cheatData.icon || "üéÆ"
    };
    
    cheatsData.push(newCheat);
    renderCheats();
    
    return newCheat;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —á–∏—Ç–∞
function removeCheat(cheatId) {
    const index = cheatsData.findIndex(c => c.id === cheatId);
    if (index > -1) {
        cheatsData.splice(index, 1);
        renderCheats();
        return true;
    }
    return false;
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.CheatsCatalog = {
    addCheat,
    removeCheat,
    cheatsData
};

// –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø–∞—Ä–∞–ª–ª–∞–∫—Å–∞ –¥–ª—è —Ñ–æ–Ω–∞
document.addEventListener('mousemove', (e) => {
    const mouseX = e.clientX / window.innerWidth;
    const mouseY = e.clientY / window.innerHeight;
    
    document.body.style.background = `
        radial-gradient(circle at ${mouseX * 100}% ${mouseY * 100}%, 
        rgba(255, 0, 64, 0.05) 0%, 
        transparent 50%),
        linear-gradient(135deg, #0f0f0f 0%, #1a1a1a 100%)
    `;
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏
    document.body.classList.add('loaded');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ç–∞–ª–æ–≥
    renderCheats();
});

// –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∏—Ç–∞–º–∏
window.CheatsCatalog.updateCheat = function(cheatId, newData) {
    const index = cheatsData.findIndex(c => c.id === cheatId);
    if (index > -1) {
        cheatsData[index] = { ...cheatsData[index], ...newData };
        renderCheats();
        return cheatsData[index];
    }
    return null;
};

window.CheatsCatalog.getCheat = function(cheatId) {
    return cheatsData.find(c => c.id === cheatId);
};

window.CheatsCatalog.getAllCheats = function() {
    return [...cheatsData];
};

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã (–µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è)
window.CheatsCatalog.changeTheme = function(theme) {
    document.body.className = theme;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —á–∏—Ç–æ–≤
window.CheatsCatalog.searchCheats = function(query) {
    const filteredCheats = cheatsData.filter(cheat => 
        cheat.name.toLowerCase().includes(query.toLowerCase()) ||
        cheat.version.toLowerCase().includes(query.toLowerCase())
    );
    
    catalogGrid.innerHTML = '';
    filteredCheats.forEach((cheat, index) => {
        const card = createCheatCard(cheat);
        catalogGrid.appendChild(card);
        
        setTimeout(() => {
            card.classList.add('animate');
        }, index * 100);
    });
    
    return filteredCheats;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —á–∏—Ç–æ–≤
window.CheatsCatalog.sortCheats = function(sortBy) {
    let sortedCheats = [...cheatsData];
    
    switch(sortBy) {
        case 'name':
            sortedCheats.sort((a, b) => a.name.localeCompare(b.name));
            break;
        case 'version':
            sortedCheats.sort((a, b) => a.version.localeCompare(b.version));
            break;
        case 'id':
            sortedCheats.sort((a, b) => a.id - b.id);
            break;
        default:
            break;
    }
    
    catalogGrid.innerHTML = '';
    sortedCheats.forEach((cheat, index) => {
        const card = createCheatCard(cheat);
        catalogGrid.appendChild(card);
        
        setTimeout(() => {
            card.classList.add('animate');
        }, index * 100);
    });
    
    return sortedCheats;
};

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
document.addEventListener('keydown', (e) => {
    if (e.key === 'Tab' && modalOverlay.classList.contains('active')) {
        e.preventDefault();
        
        const focusableElements = modalOverlay.querySelectorAll(
            'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
        );
        
        const firstElement = focusableElements[0];
        const lastElement = focusableElements[focusableElements.length - 1];
        
        if (e.shiftKey) {
            if (document.activeElement === firstElement) {
                lastElement.focus();
            }
        } else {
            if (document.activeElement === lastElement) {
                firstElement.focus();
            }
        }
    }
});

// –ê–≤—Ç–æ—Ñ–æ–∫—É—Å –Ω–∞ –∫–Ω–æ–ø–∫–µ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
const originalOpenModal = openModal;
openModal = function(cheat) {
    originalOpenModal(cheat);
    setTimeout(() => {
        modalClose.focus();
    }, 100);
};
